{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://laravel-translator-helper/./src/extension.ts","webpack://laravel-translator-helper/external commonjs \"vscode\"","webpack://laravel-translator-helper/external node-commonjs \"fs\"","webpack://laravel-translator-helper/external node-commonjs \"path\"","webpack://laravel-translator-helper/webpack/bootstrap","webpack://laravel-translator-helper/webpack/startup"],"sourcesContent":["import * as vscode from 'vscode';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nexport function activate(context: vscode.ExtensionContext) {\n\n    let disposable = vscode.commands.registerCommand('extension.handleText', async () => {\n        const editor = vscode.window.activeTextEditor;\n\n        if (editor) {\n            const selection = editor.selection;\n            const text = editor.document.getText(selection);\n\n\t\t\tif (!text) {\n                vscode.window.showErrorMessage('No text selected.');\n                return;\n            }\n\n\t\t\t// Prompt user for file path\n            const filePathInput = await vscode.window.showInputBox({\n                prompt: 'Enter file path for localization (e.g., head/message.php)',\n                placeHolder: 'e.g., head/message.php',\n            });\n\n            if (!filePathInput) {\n                vscode.window.showErrorMessage('No file path entered, operation canceled.');\n                return;\n            }\n\n            // Extract key and translation path from the file path\n            const { key, translationPath } = getKeyAndPath(filePathInput, text);\n            // Format the wrapped text\n            const wrappedText = `{{ __('${translationPath}.${key}') }}`;\n\n            editor.edit(editBuilder => {\n                editBuilder.replace(selection, wrappedText);\n            });\n\n            // Hardcoded root directory\n            const rootDirectory = vscode.workspace.getConfiguration('laravelTranslatorHelper').get<string>('rootDirectory') || 'resources/lang';\n\n            // Retrieve and process locale folders\n            const locales = getLocaleFolders(path.join(vscode.workspace.rootPath!, rootDirectory));\n            if (locales.length === 0) {\n                vscode.window.showErrorMessage('No locale directories found.');\n                return;\n            }\n\n            // Process each locale\n            for (const locale of locales) {\n                const localeDirPath = path.join(vscode.workspace.rootPath!, rootDirectory, locale);\n                const targetDirPath = path.join(localeDirPath, path.dirname(filePathInput));\n                const fileName = path.basename(filePathInput);\n                const filePath = path.join(targetDirPath, fileName);\n\n                // Create the directory if it does not exist\n                if (!fs.existsSync(targetDirPath)) {\n                    fs.mkdirSync(targetDirPath, { recursive: true });\n                }\n\n                // Create the file if it does not exist\n                if (!fs.existsSync(filePath)) {\n                    fs.writeFileSync(filePath, `<?php\\n\\nreturn [\\n];\\n`);\n                }\n\n                // Update the locale file with the new key-value pair\n                if (!translationKeyExists(filePath, key)) {\n                    updateLocaleFile(filePath, key, text);\n                }\n            }\n        }\n    });\n\n    context.subscriptions.push(disposable);\n}\n\nfunction getKeyAndPath(filePath: string, text: string): { key: string, translationPath: string } {\n    const parsedPath = path.parse(filePath);\n    const key = generateKeyFromText(text);\n    const translationPath = path.join(parsedPath.dir, parsedPath.name).replace(/\\\\/g, '/');\n    \n    return { key, translationPath };\n}\n\nfunction generateKeyFromText(text: string): string {\n    const latinText = transliterate(text);\n    return latinText\n        .trim()\n        .toLowerCase()\n        .replace(/\\s+/g, '_')\n        .replace(/[^a-z0-9_]/g, '');\n}\n\nfunction transliterate(text: string): string {\n    const cyrillicToLatinMap: { [key: string]: string } = {\n        'А': 'A', 'Б': 'B', 'В': 'V', 'Г': 'G', 'Д': 'D', 'Е': 'E', 'Ё': 'E', 'Ж': 'Zh',\n        'З': 'Z', 'И': 'I', 'Й': 'Y', 'К': 'K', 'Л': 'L', 'М': 'M', 'Н': 'N', 'О': 'O',\n        'П': 'P', 'Р': 'R', 'С': 'S', 'Т': 'T', 'У': 'U', 'Ф': 'F', 'Х': 'Kh', 'Ц': 'Ts',\n        'Ч': 'Ch', 'Ш': 'Sh', 'Щ': 'Shch', 'Ъ': '', 'Ы': 'Y', 'Ь': '', 'Э': 'E', 'Ю': 'Yu',\n        'Я': 'Ya', 'а': 'a', 'б': 'b', 'в': 'v', 'г': 'g', 'д': 'd', 'е': 'e', 'ё': 'e',\n        'ж': 'zh', 'з': 'z', 'и': 'i', 'й': 'y', 'к': 'k', 'л': 'l', 'м': 'm', 'н': 'n',\n        'о': 'o', 'п': 'p', 'р': 'r', 'с': 's', 'т': 't', 'у': 'u', 'ф': 'f', 'х': 'kh',\n        'ц': 'ts', 'ч': 'ch', 'ш': 'sh', 'щ': 'shch', 'ъ': '', 'ы': 'y', 'ь': '', 'э': 'e',\n        'ю': 'yu', 'я': 'ya'\n    };\n\n    return text.split('').map(char => cyrillicToLatinMap[char] || char).join('');\n}\n\nfunction translationKeyExists(filePath: string, key: string): boolean {\n    try {\n        const fileContent = fs.readFileSync(filePath, 'utf-8');\n        const regex = new RegExp(`['\"]${key}['\"]\\\\s*=>`);\n        return regex.test(fileContent);\n    } catch (error) {\n        vscode.window.showErrorMessage('Failed to read locale file: ' + (error as Error).message);\n        return false;\n    }\n}\n\nfunction updateLocaleFile(filePath: string, key: string, text: string) {\n    vscode.workspace.openTextDocument(filePath).then(document => {\n        const edit = new vscode.WorkspaceEdit();\n        const newEntry = `'${key}' => '${text}'`;\n\n        const fileUri = vscode.Uri.file(filePath);\n        const textContent = document.getText();\n\n        // Check if the file is new or empty\n        const isFileNew = !textContent.trim() || textContent.includes('return [\\n];');\n\n        if (isFileNew) {\n            // For a new file or an empty file, set up the array and add the entry\n            edit.replace(fileUri, new vscode.Range(new vscode.Position(0, 0), new vscode.Position(document.lineCount, 0)), `<?php\\n\\nreturn [\\n    ${newEntry}\\n];\\n`);\n        } else {\n            // The file has existing content\n            const lines = textContent.split('\\n');\n            let lastLineIndex = lines.length - 1;\n\n            // Remove trailing white spaces or new lines at the end of the document\n            while (lastLineIndex >= 0 && !lines[lastLineIndex].trim()) {\n                lastLineIndex--;\n            }\n\n            let insertPosition: vscode.Position | null = null;\n            let needsComma = false;\n\n            // Find the position to insert the new entry\n            for (let i = lastLineIndex; i >= 0; i--) {\n                const line = lines[i].trim();\n                if (line === '];') {\n                    insertPosition = new vscode.Position(i, 0);\n                    // Check if we need to add a comma\n                    if (lines[i - 1] && !lines[i - 1].trim().endsWith(',')) {\n                        needsComma = true;\n                    }\n                    break;\n                }\n            }\n\n            if (insertPosition) {\n                if (needsComma) {\n                    // Add a comma before the new entry if needed\n                    const previousLinePosition = new vscode.Position(insertPosition.line - 1, lines[insertPosition.line - 1].length);\n                    edit.insert(fileUri, previousLinePosition, ',');\n                }\n                // Insert the new entry and maintain formatting\n                edit.insert(fileUri, insertPosition, `    ${newEntry}\\n`);\n            } else {\n                // Handle case where the array was empty or newly created\n                edit.insert(fileUri, new vscode.Position(lines.length, 0), `\\n    ${newEntry},\\n];\\n`);\n            }\n        }\n\n        vscode.workspace.applyEdit(edit).then(success => {\n            if (success) {\n                vscode.window.showInformationMessage('Translation added to the locale file.');\n            } else {\n                vscode.window.showErrorMessage('Failed to update the locale file.');\n            }\n        });\n    });\n}\nfunction getLocaleFolders(rootLangPath: string): string[] {\n    try {\n        return fs.readdirSync(rootLangPath).filter(file => {\n            return fs.statSync(path.join(rootLangPath, file)).isDirectory();\n        });\n    } catch (error) {\n        vscode.window.showErrorMessage('Failed to retrieve locale folders: ' + (error as Error).message);\n        return [];\n    }\n}","module.exports = require(\"vscode\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["context","disposable","vscode","commands","registerCommand","editor","window","activeTextEditor","selection","text","document","getText","showErrorMessage","filePathInput","showInputBox","prompt","placeHolder","key","translationPath","filePath","parsedPath","path","parse","latinText","cyrillicToLatinMap","split","map","char","join","transliterate","trim","toLowerCase","replace","generateKeyFromText","dir","name","getKeyAndPath","wrappedText","edit","editBuilder","rootDirectory","workspace","getConfiguration","get","locales","rootLangPath","fs","readdirSync","filter","file","statSync","isDirectory","error","message","getLocaleFolders","rootPath","length","locale","localeDirPath","targetDirPath","dirname","fileName","basename","existsSync","mkdirSync","recursive","writeFileSync","translationKeyExists","updateLocaleFile","subscriptions","push","fileContent","readFileSync","RegExp","test","openTextDocument","then","WorkspaceEdit","newEntry","fileUri","Uri","textContent","includes","Range","Position","lineCount","lines","lastLineIndex","insertPosition","needsComma","i","endsWith","previousLinePosition","line","insert","applyEdit","success","showInformationMessage","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}