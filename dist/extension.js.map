{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://laravel-translator-helper/./src/extension.ts","webpack://laravel-translator-helper/external commonjs \"vscode\"","webpack://laravel-translator-helper/external node-commonjs \"fs\"","webpack://laravel-translator-helper/external node-commonjs \"path\"","webpack://laravel-translator-helper/./src/formatText.ts","webpack://laravel-translator-helper/./src/filePathUtils.ts","webpack://laravel-translator-helper/./src/translationService.ts","webpack://laravel-translator-helper/webpack/bootstrap","webpack://laravel-translator-helper/webpack/before-startup","webpack://laravel-translator-helper/webpack/startup","webpack://laravel-translator-helper/webpack/after-startup"],"sourcesContent":["import * as vscode from 'vscode';\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\nimport { formatText } from './formatText';\r\nimport { getFilePath } from './filePathUtils';\r\nimport { translateText } from './translationService';\r\n\r\nexport function activate(context: vscode.ExtensionContext) {\r\n\r\n    let disposable = vscode.commands.registerCommand('extension.handleText', async () => {\r\n        const editor = vscode.window.activeTextEditor;\r\n\r\n        if (editor) {\r\n            const selection = editor.selection;\r\n            const text = editor.document.getText(selection);\r\n\r\n\t\t\tif (!text) {\r\n                vscode.window.showErrorMessage('No text selected.');\r\n                return;\r\n            }\r\n\r\n\t\t\tconst filePathInput = await getFilePath();\r\n\r\n            // Extract key and translation path from the file path\r\n            const { key, translationPath } = await getKeyAndPath(filePathInput, text);\r\n            // Format the wrapped text\r\n            const wrappedText = `{{ __('${translationPath}.${key}') }}`;\r\n\r\n            editor.edit(editBuilder => {\r\n                editBuilder.replace(selection, wrappedText);\r\n            });\r\n\r\n            // Hardcoded root directory\r\n            const rootDirectory = vscode.workspace.getConfiguration('laravelTranslatorHelper').get<string>('rootDirectory') || 'resources/lang';\r\n\r\n            // Retrieve and process locale folders\r\n            const locales = getLocaleFolders(path.join(vscode.workspace.rootPath!, rootDirectory));\r\n            if (locales.length === 0) {\r\n                vscode.window.showErrorMessage('No locale directories found.');\r\n                return;\r\n            }\r\n\r\n            // Process each locale\r\n            for (const locale of locales) {\r\n                const localeDirPath = path.join(vscode.workspace.rootPath!, rootDirectory, locale);\r\n                const targetDirPath = path.join(localeDirPath, path.dirname(filePathInput));\r\n                const fileName = path.basename(filePathInput);\r\n                const filePath = path.join(targetDirPath, fileName);\r\n\r\n                // Create the directory if it does not exist\r\n                if (!fs.existsSync(targetDirPath)) {\r\n                    fs.mkdirSync(targetDirPath, { recursive: true });\r\n                }\r\n\r\n                // Create the file if it does not exist\r\n                if (!fs.existsSync(filePath)) {\r\n                    fs.writeFileSync(filePath, `<?php\\n\\nreturn [\\n];\\n`);\r\n                }\r\n\r\n                // Update the locale file with the new key-value pair\r\n                if (!translationKeyExists(filePath, key)) {\r\n                    await updateLocaleFile(filePath, key, text, locale);\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    context.subscriptions.push(disposable);\r\n}\r\n\r\nasync function getKeyAndPath(filePath: string, text: string): Promise<{ key: string, translationPath: string }> {\r\n    const parsedPath = path.parse(filePath);\r\n    const key = await generateKeyFromText(text);\r\n    const translationPath = path.join(parsedPath.dir, parsedPath.name).replace(/\\\\/g, '/');\r\n    \r\n    return { key, translationPath };\r\n}\r\n\r\nasync function generateKeyFromText(text: string): Promise<string> {\r\n    const config = vscode.workspace.getConfiguration('laravelTranslatorHelper');\r\n    const caseFormat = config.get<string>('caseFormat', 'snake_case'); // Default to snake_case if not set\r\n\r\n    try {\r\n        const translatedText = await translateText(text, 'en');//translate.translate(text, { from: 'ru', to: 'en', fetchOptions: { agent } });\r\n\r\n        return formatText(translatedText, caseFormat);\r\n    } catch (error) {\r\n        console.error(\"Translation error: \", error);\r\n        return text; \r\n    }\r\n}\r\n\r\nfunction translationKeyExists(filePath: string, key: string): boolean {\r\n    try {\r\n        const fileContent = fs.readFileSync(filePath, 'utf-8');\r\n        const regex = new RegExp(`['\"]${key}['\"]\\\\s*=>`);\r\n        return regex.test(fileContent);\r\n    } catch (error) {\r\n        vscode.window.showErrorMessage('Failed to read locale file: ' + (error as Error).message);\r\n        return false;\r\n    }\r\n}\r\n\r\nasync function updateLocaleFile(filePath: string, key: string, text: string, locale: string) {\r\n    const nonTranslatedText = text;//await translateText(text, locale); \r\n    vscode.workspace.openTextDocument(filePath).then(document => {\r\n        const edit = new vscode.WorkspaceEdit();\r\n        const newEntry = `'${key}' => '${nonTranslatedText}'`;\r\n\r\n        const fileUri = vscode.Uri.file(filePath);\r\n        const textContent = document.getText();\r\n\r\n        // Check if the file is new or empty\r\n        const isFileNew = !textContent.trim() || textContent.includes('return [\\n];');\r\n\r\n        if (isFileNew) {\r\n            // For a new file or an empty file, set up the array and add the entry\r\n            edit.replace(fileUri, new vscode.Range(new vscode.Position(0, 0), new vscode.Position(document.lineCount, 0)), `<?php\\n\\nreturn [\\n    ${newEntry}\\n];\\n`);\r\n        } else {\r\n            // The file has existing content\r\n            const lines = textContent.split('\\n');\r\n            let lastLineIndex = lines.length - 1;\r\n\r\n            // Remove trailing white spaces or new lines at the end of the document\r\n            while (lastLineIndex >= 0 && !lines[lastLineIndex].trim()) {\r\n                lastLineIndex--;\r\n            }\r\n\r\n            let insertPosition: vscode.Position | null = null;\r\n            let needsComma = false;\r\n\r\n            // Find the position to insert the new entry\r\n            for (let i = lastLineIndex; i >= 0; i--) {\r\n                const line = lines[i].trim();\r\n                if (line === '];') {\r\n                    insertPosition = new vscode.Position(i, 0);\r\n                    // Check if we need to add a comma\r\n                    if (lines[i - 1] && !lines[i - 1].trim().endsWith(',')) {\r\n                        needsComma = true;\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (insertPosition) {\r\n                if (needsComma) {\r\n                    // Add a comma before the new entry if needed\r\n                    const previousLinePosition = new vscode.Position(insertPosition.line - 1, lines[insertPosition.line - 1].length);\r\n                    edit.insert(fileUri, previousLinePosition, ',');\r\n                }\r\n                // Insert the new entry and maintain formatting\r\n                edit.insert(fileUri, insertPosition, `    ${newEntry}\\n`);\r\n            } else {\r\n                // Handle case where the array was empty or newly created\r\n                edit.insert(fileUri, new vscode.Position(lines.length, 0), `\\n    ${newEntry},\\n];\\n`);\r\n            }\r\n        }\r\n\r\n        vscode.workspace.applyEdit(edit).then(success => {\r\n            if (success) {\r\n                vscode.window.showInformationMessage('Translation added to the locale file.');\r\n            } else {\r\n                vscode.window.showErrorMessage('Failed to update the locale file.');\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction getLocaleFolders(rootLangPath: string): string[] {\r\n    try {\r\n        return fs.readdirSync(rootLangPath).filter(file => {\r\n            return fs.statSync(path.join(rootLangPath, file)).isDirectory();\r\n        });\r\n    } catch (error) {\r\n        vscode.window.showErrorMessage('Failed to retrieve locale folders: ' + (error as Error).message);\r\n        return [];\r\n    }\r\n}","module.exports = require(\"vscode\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","function toCamelCase(text: string): string {\r\n    return text\r\n        .replace(/(?:^\\w|[A-Z]|\\b\\w|\\s+)/g, (match, index) =>\r\n            index === 0 ? match.toLowerCase() : match.toUpperCase()\r\n        )\r\n        .replace(/\\s+/g, ''); // Remove spaces after transforming to camelCase\r\n}\r\n\r\n\r\nfunction toSnakeCase(text: string): string {\r\n    return text.replace(/\\s+/g, '_'); // Replace spaces with underscores\r\n}\r\n\r\n\r\nexport function formatText(text: string, format: string): string {\r\n    let formattedText = text.trim().toLowerCase();\r\n\r\n    if (format === 'camelCase') {\r\n        formattedText = toCamelCase(formattedText);\r\n    } else if (format === 'snake_case') {\r\n        formattedText = toSnakeCase(formattedText);\r\n    }\r\n\r\n    // Remove non-alphanumeric characters\r\n    return formattedText.replace(/[^\\w]/g, '');\r\n}","import * as vscode from 'vscode';\r\nimport * as path from 'path';\r\n\r\n// Function to get the file path based on configuration mode\r\nexport  async function getFilePath(): Promise<string> {\r\n    const config = vscode.workspace.getConfiguration('laravelTranslatorHelper');\r\n    const filePathMode = config.get<string>('filePathMode', 'auto');\r\n\r\n    if (filePathMode === 'manual') {\r\n        // Prompt the user for the file path\r\n        const filePathInput = await vscode.window.showInputBox({\r\n            prompt: 'Enter file path for localization (e.g., head/message.php)',\r\n            placeHolder: 'e.g., head/message.php',\r\n        });\r\n\r\n        if (!filePathInput) {\r\n            vscode.window.showErrorMessage('No file path entered, operation canceled.');\r\n            return '';\r\n        }\r\n\r\n        return filePathInput;\r\n    } else {\r\n        // Use the file path of the currently active editor\r\n        const editor = vscode.window.activeTextEditor;\r\n        if (!editor) {\r\n            vscode.window.showErrorMessage('No active editor found, operation canceled.');\r\n            return '';\r\n        }\r\n\r\n        const filePath = editor.document.uri.fsPath;\r\n        const basePath = path.join(vscode.workspace.rootPath || '', 'resources', 'views') + path.sep;\r\n        let relativePath = filePath.replace(basePath, '').replace(/\\\\/g, '/');\r\n        \r\n        if (relativePath.endsWith('.blade.php')) {\r\n            relativePath = relativePath.slice(0, -'.blade.php'.length) + '.php';\r\n        }\r\n\r\n        return relativePath;\r\n    }\r\n}","function sleep(ms: number) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nexport async function translateText(text: string, targetLang: string, sourceLang = 'auto'): Promise<string> {\r\n    const url = 'https://translate.googleapis.com/translate_a/single?';\r\n    const params = {\r\n        client: 'at',\r\n        dt: 't',   // return sentences\r\n        sl: 'auto', // from\r\n        tl: targetLang, // to\r\n        q: text\r\n    };\r\n    const queryString = new URLSearchParams(params).toString();\r\n\r\n    try {\r\n        await sleep(1000); // delay of 1 second to reduce frequency of requests\r\n        const response = await fetch(url + queryString, { method: 'GET' });\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n        const resultArrayBuffer = await response.arrayBuffer();\r\n        const decoder = new TextDecoder('utf-8');\r\n        const resultText = decoder.decode(resultArrayBuffer);\r\n        const result = JSON.parse(resultText);\r\n        return result[0][0][0];\r\n    } catch (error) {\r\n        throw new Error('Error with translation request: ' + error);\r\n    }\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(0);\n",""],"names":[],"sourceRoot":""}